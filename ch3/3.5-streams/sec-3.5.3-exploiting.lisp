
;; sqrt stream
(defun sqrt-improve (guess x)
  (average guess (/ x guess)))

(defun average (&rest args)
  (/ (apply #'+ args) (length args)))

(defun sqrt-stream (x)
  (let* ((guesses (cons-stream 1.0
			       (stream-map #'(lambda (guess)
					       (sqrt-improve guess x))
					   guesses))))
    guesses))

;; new utils
(defun display-partial-stream (s n)
  (stream-for-n #'display-line s n))

(defun stream-for-n (proc s n)
  (if (or (stream-null? s) (= 0 n))
      'done
    (progn (funcall proc (stream-car s))
	   (stream-for-n proc (stream-cdr s) (1- n)))))

;; pi stream
(defun pi-summands (n)
  (cons-stream (/ 1.0 n)
	       (stream-map #'- (pi-summands (+ n 2)))))

(setf pi-stream
      (scale-stream (partial-sums (pi-summands 1)) 4))

;; euler transform for accelerating sequences
(defun euler-transform (s)
  (let ((s0 (stream-ref s 0))           ; Sn-1
        (s1 (stream-ref s 1))           ; Sn
        (s2 (stream-ref s 2)))          ; Sn+1
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))

(defun make-tableau (transform s)
  (cons-stream s
	       (make-tableau transform
			     (funcall transform s))))

(defun accelerated-sequence (transform s)
  (stream-map #'stream-car
	      (make-tableau transform s)))

;; Ex. 3.63
;; Using the local variable is more efficient because each element of the 
;; stream will only be computed once, due to the memo-proc optimization/
;; The crucial piece here is that in Louis Reasoner's the recursive call 
;; to sqrt-stream is a function call, and therefore each call will essentially
;; start over from scratch, whereas the recursive reference to the local 
;; variable refers to the same stream each time, which has cached the previous
;; results for each element in a memo-proc closure.

;; Ex. 3.64

;; another utility - analogous to maplist 

(defun stream-maplist (proc s)
  (if (stream-null? s)
      the-empty-stream
    (cons-stream (funcall proc s)
		 (stream-maplist proc (stream-cdr s)))))

(defun stream-limit (s tolerance)
  (labels ((proc (s)
		 (if (< (abs (- (stream-car s) (stream-car (stream-cdr s))))
			tolerance)
		     (stream-car (stream-cdr s))
		   (proc (stream-cdr s)))))
	  (proc s)))

;; Ex. 3.64

(defun ln-summands (n)
  (cons-stream (/ 1.0 n)
	       (stream-map #'- (ln-summands (1+ n)))))

(setf ln-stream (partial-sums (ln-summands 1)))

(setf ln-stream2 (euler-transform ln-stream))

(setf ln-stream3 (accelerated-sequence #'euler-transform ln-stream))

