;;;; Section 3.5.2 Exploting the stream paradigm

;;; Formulating iterations as stream processes

;; sqrt stream
(defun sqrt-improve (guess x)
  (average guess (/ x guess)))

(defun average (&rest args)
  (/ (apply #'+ args) (length args)))

(defun sqrt-stream (x)
  (let* ((guesses (cons-stream 1.0
			       (stream-map #'(lambda (guess)
					       (sqrt-improve guess x))
					   guesses))))
    guesses))

;; new utils
(defun display-partial-stream (s n)
  (stream-for-n #'display-line s n))

(defun stream-for-n (proc s n)
  (if (or (stream-null? s) (= 0 n))
      'done
    (progn (funcall proc (stream-car s))
	   (stream-for-n proc (stream-cdr s) (1- n)))))

;; pi stream
(defun pi-summands (n)
  (cons-stream (/ 1.0 n)
	       (stream-map #'- (pi-summands (+ n 2)))))

(setf pi-stream
      (scale-stream (partial-sums (pi-summands 1)) 4))

;; euler transform for accelerating sequences
(defun euler-transform (s)
  (let ((s0 (stream-ref s 0))           ; Sn-1
        (s1 (stream-ref s 1))           ; Sn
        (s2 (stream-ref s 2)))          ; Sn+1
    (cons-stream (- s2 (/ (square (- s2 s1))
                          (+ s0 (* -2 s1) s2)))
                 (euler-transform (stream-cdr s)))))

(defun make-tableau (transform s)
  (cons-stream s
	       (make-tableau transform
			     (funcall transform s))))

(defun accelerated-sequence (transform s)
  (stream-map #'stream-car
	      (make-tableau transform s)))


;; Infinite streams of pairs

(defun interleave (s1 s2)
  (if (stream-null? s1)
      s2
      (cons-stream (stream-car s1)
		   (interleave s2 (stream-cdr s1)))))

(defun pairs (s r)
  (cons-stream
   (list (stream-car s) (stream-car r))
   (interleave
    (stream-map #'(lambda (x) (list (stream-car s) x))
		(stream-cdr r))
    (pairs (stream-cdr s) (stream-cdr r)))))