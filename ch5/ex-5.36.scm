;;;; Structure and Interpretation of Computer Programs
;;;; Chapter 5 Section 5 Compilation

;;; Exercise 5.36 order of evaluation of procedure arguments

;; The compiler produces code which evaluated procedure arguments from
;; right-to-left. 

;; This order is determined in the procedure construct-arglist and the
;; code generated by code-to-get-rest-args. To change the order to
;; left-to-right we do not reverse the list operand-codes, and we have
;; to use adjoin-arg instead of cons in the generated code, to append
;; each argument to the end of argl. This results in marginally slower
;; generated code.

(define (construct-arglist operand-codes)
  (let ((operand-codes operand-codes)) ; don't reverse operand-codes
    (if (null? operand-codes)
        (make-instruction-sequence '() '(argl)
         '((assign argl (const ()))))
        (let ((code-to-get-last-arg
               (append-instruction-sequences
                (car operand-codes)
                (make-instruction-sequence '(val) '(argl)
                 '((assign argl (op list) (reg val)))))))
          (if (null? (cdr operand-codes))
              code-to-get-last-arg
              (preserving '(env)
               code-to-get-last-arg
               (code-to-get-rest-args
                (cdr operand-codes))))))))

(define (code-to-get-rest-args operand-codes)
  (let ((code-for-next-arg
         (preserving '(argl)
          (car operand-codes)
          (make-instruction-sequence '(val argl) '(argl)
           '((assign argl
                     ;; use adjoin-arg instead of cons - this is O(n)
                     ;; instead of O(1)
                     (op adjoin-arg) (reg val) (reg argl)))))))
    (if (null? (cdr operand-codes))
        code-for-next-arg
        (preserving '(env)
         code-for-next-arg
         (code-to-get-rest-args
          (cdr operand-codes))))))
